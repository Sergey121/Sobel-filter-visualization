{"version":3,"sources":["components/header/index.js","App.js","serviceWorker.js","index.js"],"names":["className","target","rel","href","kernelX","kernelY","getPixelAtPosition","data","width","x","y","i","getKernelPixel","kernel","pixelAt","wait","time","Promise","resolve","setTimeout","App","canvas","useRef","sobelCanvas","useState","setWidth","height","setHeight","handleSelectFile","e","a","file","files","c","current","window","createImageBitmap","image","w","h","context","getContext","drawImage","imageData","getImageData","sobelData","grayscaleData","r","g","b","avg","push","pixelX","pixelY","magnitude","Math","sqrt","originalArr","Array","from","sobelContext","step","last","length","splice","slice","arr","Uint8ClampedArray","newData","ImageData","putImageData","type","onChange","ref","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bcd82db6.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () => {\n  return (\n    <nav className=\"header\">\n      <div className=\"header__name\">Sobel filter visualization</div>\n      <div className=\"header__github\">\n        <a className=\"header__link\" target={'_blank'} rel=\"noopener noreferrer\" href=\"https://github.com/Sergey121/Sobel-filter-visualization/\">View on GitHub</a>\n      </div>\n    </nav>\n  )\n};\n","import React, { useRef, useState } from 'react';\nimport './App.css';\nimport Header from './components/header';\n\nconst kernelX = [\n  [-1, 0, 1],\n  [-2, 0, 2],\n  [-1, 0, 1],\n];\n\nconst kernelY = [\n  [-1, -2, -1],\n  [0, 0, 0],\n  [1, 2, 1],\n];\n\nconst getPixelAtPosition = (data, width) => {\n  return (x, y, i = 0) => {\n    return data[((width * y) + x) * 4 + i];\n  };\n};\n\nconst getKernelPixel = (kernel, pixelAt, x, y) => {\n  return (kernel[0][0] * pixelAt(x - 1, y - 1)) +\n    (kernel[0][1] * pixelAt(x, y - 1)) +\n    (kernel[0][2] * pixelAt(x + 1, y - 1)) +\n    (kernel[1][0] * pixelAt(x - 1, y)) +\n    (kernel[1][1] * pixelAt(x, y)) +\n    (kernel[1][2] * pixelAt(x + 1, y)) +\n    (kernel[2][0] * pixelAt(x - 1, y + 1)) +\n    (kernel[2][1] * pixelAt(x, y + 1)) +\n    (kernel[2][2] * pixelAt(x + 1, y + 1));\n};\n\nconst wait = (time) => new Promise((resolve) => setTimeout(resolve, time));\n\nfunction App() {\n  const canvas = useRef(null);\n  const sobelCanvas = useRef(null);\n\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n\n  const handleSelectFile = async (e) => {\n    const file = e.target.files[0];\n\n    if (file) {\n      const c = canvas.current;\n      const image = await window.createImageBitmap(file);\n      const w = image.width;\n      const h = image.height;\n\n      setWidth(w);\n      setHeight(h);\n      const context = c.getContext('2d');\n      context.drawImage(image, 0, 0);\n\n      const imageData = context.getImageData(0, 0, w, h);\n\n      let pixelAt = getPixelAtPosition(imageData.data, w);\n\n      const sobelData = [];\n      const grayscaleData = [];\n\n      for (let y = 0; y < h; y++) {\n        for (let x = 0; x < w; x++) {\n          const r = pixelAt(x, y, 0);\n          const g = pixelAt(x, y, 1);\n          const b = pixelAt(x, y, 2);\n\n          const avg = (r + g + b) / 3;\n\n          grayscaleData.push(avg, avg, avg, 255);\n        }\n      }\n\n      pixelAt = getPixelAtPosition(grayscaleData, w);\n\n      for (let y = 0; y < h; y++) {\n        for (let x = 0; x < w; x++) {\n          const pixelX = getKernelPixel(kernelX, pixelAt, x, y);\n\n          const pixelY = getKernelPixel(kernelY, pixelAt, x, y);\n\n          const magnitude = Math.sqrt((pixelX * pixelX) + (pixelY * pixelY));\n\n          sobelData.push(magnitude, magnitude, magnitude, 255);\n        }\n      }\n\n      const originalArr = Array.from(imageData.data);\n\n      const sobelContext = sobelCanvas.current.getContext('2d');\n\n      for (let step = 0, last = 0; step < sobelData.length; step += w * 4) {\n        originalArr.splice(last, w * 4, ...sobelData.slice(last, w * 4 + last));\n        const arr = new window.Uint8ClampedArray(originalArr);\n        const newData = new window.ImageData(arr, w, h);\n        sobelContext.putImageData(newData, 0, 0);\n\n        last = step;\n        await wait(30);\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <Header/>\n      <div className=\"app__content\">\n        <div className=\"app__text\">\n          <div>The Sobel operator, sometimes called the Sobelâ€“Feldman operator or Sobel filter, is used in image\n            processing and computer vision, particularly within edge detection algorithms where it creates an image\n            emphasising edges.\n          </div>\n          <div>To see visualization select any file</div>\n        </div>\n        <input type=\"file\" onChange={handleSelectFile}/>\n        <div className=\"canvas\">\n          <canvas ref={sobelCanvas} width={width} height={height}/>\n          <canvas ref={canvas} width={width} height={height}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}